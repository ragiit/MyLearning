@page "/categories"
@using MyBlazor.Components.Shared
@inject MyBlazor.Repository.IRepository.ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Daftar Kategori Produk</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Daftar Kategori Produk</h2>
        <button class="btn btn-primary d-flex align-items-center" @onclick="NavigateToCreate">
            <i class="bi bi-plus-circle me-2"></i> Tambah Kategori Baru
        </button>
    </div>

    @if (categories == null)
    {
        <div class="alert alert-info text-center" role="alert">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Memuat...</span>
            </div>
            <p class="mt-2 mb-0">Memuat kategori...</p>
        </div>
    }
    else if (!categories.Any()) // Baris 26: Ini adalah baris yang memicu error karena categories mungkin belum selesai diisi.
    {
        <div class="alert alert-warning text-center" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> Belum ada kategori yang ditambahkan.
            <button class="btn btn-sm btn-outline-primary ms-3" @onclick="NavigateToCreate">Tambahkan Sekarang!</button>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th scope="col" class="py-3 ps-4">ID</th>
                                <th scope="col" class="py-3">Nama Kategori</th>
                                <th scope="col" class="py-3 pe-4 text-end">Aksi</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr>
                                    <td class="py-3 ps-4">@category.Id</td>
                                    <td class="py-3">@category.Name</td>
                                    <td class="py-3 pe-4 text-end">
                                        <button class="btn btn-sm btn-outline-info me-2" @onclick="(() => NavigateToEdit(category.Id))">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="(() => OpenDeleteModal(category.Id, category.Name))">
                                            <i class="bi bi-trash"></i> Hapus
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<MyBlazor.Data.Category>? categories;
    private int categoryToDeleteId;
    private string categoryToDeleteName = string.Empty;
    private bool showDeleteModal;
    private bool _hasLoadedInitialData = false; // <-- FLAG BARU

    protected override async Task OnInitializedAsync()
    {
        // Panggil LoadCategories di sini, HANYA SEKALI, saat komponen pertama kali diinisialisasi.
        // Ini akan menangani pre-rendering dan inisialisasi circuit dengan aman.
        if (!_hasLoadedInitialData)
        {
            await LoadCategories();
            _hasLoadedInitialData = true; // Set flag setelah data berhasil dimuat
        }
    }

    // Hapus atau kosongkan OnAfterRenderAsync jika tidak ada logika lain yang dibutuhkan di sana
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //    // Jika Anda punya logika JS interop yang perlu dijalankan SETELAH render pertama, tempatkan di sini.
    //    // JANGAN panggil LoadCategories di sini lagi.
    // }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryRepository.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Gagal memuat kategori: {ex.Message}");
            categories = Enumerable.Empty<MyBlazor.Data.Category>(); // Penting: Pastikan categories tidak null jika error
        }
        // StateHasChanged() tidak diperlukan di sini jika dipanggil dari OnInitializedAsync/OnParametersSetAsync
        // karena Blazor akan merender ulang secara otomatis setelah Task selesai.
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/categories/create");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/categories/edit/{id}");
    }

    private void OpenDeleteModal(int id, string name)
    {
        categoryToDeleteId = id;
        categoryToDeleteName = name;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        categoryToDeleteId = 0;
        categoryToDeleteName = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var result = await CategoryRepository.DeleteAsync(categoryToDeleteId);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("showToastr", "success", $"Kategori '{categoryToDeleteName}' berhasil dihapus!");
                await LoadCategories();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Gagal menghapus kategori '{categoryToDeleteName}'. Mungkin sudah tidak ada.");
                Console.WriteLine($"Gagal menghapus kategori dengan ID: {categoryToDeleteId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting category: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Terjadi kesalahan saat menghapus kategori: {ex.Message}");
        }
        finally
        {
            CloseDeleteModal();
        }
    }
}

<BsModal Show="@showDeleteModal"
         Title="Konfirmasi Penghapusan"
         HeaderCssClass="bg-danger text-white"
         CloseButtonCssClass="btn-close-white"
         ConfirmButtonText="Hapus"
         ConfirmButtonCssClass="btn-danger"
         OnClose="CloseDeleteModal"
         OnConfirm="ConfirmDelete">
    <ChildContent>
        Apakah Anda yakin ingin menghapus kategori "<strong class="text-danger">@categoryToDeleteName</strong>" (ID: @categoryToDeleteId)? Aksi ini tidak dapat dibatalkan.
    </ChildContent>
</BsModal>