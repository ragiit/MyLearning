@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MyBlazor.Repository.IRepository.IProductRepository ProductRepository
@inject MyBlazor.Repository.IRepository.ICategoryRepository CategoryRepository
@inject MyBlazor.Repository.IRepository.IShoppingCartRepository ShoppingCartRepository
@inject NotificationService NotificationService  
@inject NavigationManager NavigationManager

<PageTitle>Home - MyBlazor Shop</PageTitle>

<div class="container mt-4">
    <div class="row mb-4 align-items-center">
        <div class="col-md-6">
            <RadzenText TextStyle="TextStyle.DisplayH4" TagName="TagName.H1" class="fw-bold text-primary">Selamat Datang di MyBlazor Shop!</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2">Temukan produk-produk terbaik kami.</RadzenText>
        </div>
        <div class="col-md-6 text-end">
            <RadzenImage Path="https://placehold.co/600x400?text=Banner" class="img-fluid rounded shadow-sm" Style="max-height: 150px;" />
        </div>
    </div>

    <RadzenCard class="mb-5">
        <RadzenRow AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenColumn SizeMd="6">
                <RadzenTextBox Placeholder="Cari produk..." @bind-Value="searchTerm" @oninput="@(args => { searchTerm = args.Value.ToString(); ApplyFilters(); })" Icon="search" class="w-100" />
            </RadzenColumn>
            <RadzenColumn SizeMd="4">
                @if (categories != null)
                {
                        <RadzenDropDown TValue="int" Data="@categories" TextProperty="Name" ValueProperty="Id"
                                        @bind-Value="selectedCategoryId" Placeholder="Semua Kategori"
                                        AllowClear="true" Change="@(args => ApplyFilters())" class="w-100" />
                }
            </RadzenColumn>
            <RadzenColumn SizeMd="2">
                <RadzenButton Click="@ResetFilters" Text="Reset" Icon="refresh" ButtonStyle="ButtonStyle.Light" class="w-100" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    @if (filteredProducts == null)
    {
            <div class="text-center mt-5">
                <RadzenText TextStyle="TextStyle.H5" class="mb-4">Memuat produk...</RadzenText>
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="height: 20px;" />
            </div>
    }
    else if (!filteredProducts.Any())
    {
            <RadzenCard class="mt-5 text-center p-4">
                <RadzenIcon Icon="search" Style="font-size: 4rem; color: var(--rz-secondary-color);" />
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" class="mt-3">Produk Tidak Ditemukan</RadzenText>
                <RadzenText>Tidak ada produk yang cocok dengan kriteria pencarian Anda.</RadzenText>
            </RadzenCard>
    }
    else
    {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mt-4">
                @foreach (var product in filteredProducts)
                {
                        <div class="col d-flex">
                            <RadzenCard class="w-100 d-flex flex-column">
                                <RadzenImage Path="@(string.IsNullOrEmpty(product.ImageUrl) ? "https://placehold.co/600x400?text=Not+Found" : product.ImageUrl)"
                                             Style="width: 100%; height: 250px; object-fit: cover; display: block;" />
                                <RadzenStack Gap="0.25rem" class="p-4 flex-grow-1">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="text-muted">@product.Category?.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H2" class="text-truncate"><b>@product.Name</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.H5" class="text-primary my-2"><b>@product.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("id-ID"))</b></RadzenText>
                                    @* <RadzenText TextStyle="TextStyle.Body2" class="text-muted flex-grow-1">
                                        @((MarkupString)product.Description.Substring(0, Math.Min(product.Description.Length, 100)) + (product.Description.Length > 100 ? "..." : ""))
                                    </RadzenText> *@
                            <RadzenText TextStyle="TextStyle.Body2" class="text-muted flex-grow-1">
                                @((MarkupString)(product.Description.Substring(0, Math.Min(product.Description.Length, 100)) + (product.Description.Length > 100 ? "..." : "")))
                            </RadzenText>

                                    <RadzenButton Text="Tambah ke Keranjang" Icon="add_shopping_cart" ButtonStyle="ButtonStyle.Success"
                                                  Click="@(() => AddProductToCart(product))" class="mt-3" />
                                </RadzenStack>
                            </RadzenCard>
                        </div>
                }
            </div>
    }
</div>

@code {
    private IEnumerable<MyBlazor.Data.Product>? allProducts;
    private IEnumerable<MyBlazor.Data.Product>? filteredProducts;
    private IEnumerable<MyBlazor.Data.Category>? categories;
    private string searchTerm = string.Empty;
    private int selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            categories = await CategoryRepository.GetAllAsync();
            allProducts = await ProductRepository.GetAllAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"Gagal memuat data: {ex.Message}" });
            allProducts = Enumerable.Empty<MyBlazor.Data.Product>();
            categories = Enumerable.Empty<MyBlazor.Data.Category>();
            filteredProducts = Enumerable.Empty<MyBlazor.Data.Product>();
        }
    }

    private async Task AddProductToCart(MyBlazor.Data.Product product)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login", forceLoad: true);
            return;
        }

        try
        {
            var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            var result = await ShoppingCartRepository.UpdateCartAsync(userId, product.Id, 1);
            if (result)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Berhasil", Detail = $"'{product.Name}' ditambahkan ke keranjang!" });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Gagal", Detail = $"Gagal menambahkan '{product.Name}'." });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"Terjadi kesalahan: {ex.Message}" });
        }
    }

    private void ApplyFilters()
    {
        if (allProducts == null) return;

        IEnumerable<MyBlazor.Data.Product> productsQuery = allProducts;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            productsQuery = productsQuery.Where(p =>
                p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (p.Description != null && p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );
        }

        if (selectedCategoryId != 0)
        {
            productsQuery = productsQuery.Where(p => p.CategoryId == selectedCategoryId);
        }

        filteredProducts = productsQuery.ToList();
        StateHasChanged();
    }

    private void ResetFilters()
    {
        searchTerm = string.Empty;
        selectedCategoryId = 0;
        ApplyFilters();
    }
}