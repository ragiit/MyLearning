@page "/order-list"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MyBlazor.Data
@attribute [Authorize]

<PageTitle>Daftar Pesanan</PageTitle>

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" class="mb-4">Daftar Pesanan</RadzenText>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
        @ErrorMessage
    </RadzenAlert>
}
else
{
    <RadzenCard>
        <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@Orders" TItem="OrderHeader" IsLoading="@IsLoading"
                        EmptyText="Tidak ada pesanan yang ditemukan."
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple"
                        LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="OrderHeader" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center" />

                <RadzenDataGridColumn TItem="OrderHeader" Property="Name" Title="Nama Pelanggan" Width="220px" />

                <RadzenDataGridColumn TItem="OrderHeader" Property="Email" Title="Email" Width="220px" />

                <RadzenDataGridColumn TItem="OrderHeader" Property="OrderDate" Title="Tanggal" Width="150px" FormatString="{0:dd MMM yyyy}" />

                <RadzenDataGridColumn TItem="OrderHeader" Property="OrderTotal" Title="Total Pesanan" Width="160px">
                    <Template Context="order">
                        @order.OrderTotal.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("id-ID"))
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="OrderHeader" Property="Status" Title="Status" Width="140px" Filterable="false" Sortable="false">
                    <Template Context="order">
                        <RadzenBadge Text="@order.Status" BadgeStyle="@GetBadgeStyle(order.Status)" Shade="Shade.Lighter" IsPill="true" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="OrderHeader" Title="Aksi" Width="120px" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                    <Template Context="order">
                        <RadzenButton Icon="pageview" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter"
                                      Click="@(() => NavigationManager.NavigateTo($"/order-details/{order.Id}"))"
                                      Size="ButtonSize.Small" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
}


@code {
    private RadzenDataGrid<OrderHeader> ordersGrid; // Referensi ke DataGrid

    // Logika Anda dari sini ke bawah TIDAK BERUBAH SAMA SEKALI.
    // Cukup ganti GetStatusBadgeClass dengan GetBadgeStyle agar lebih sesuai.

    private BadgeStyle GetBadgeStyle(string status)
    {
        return status switch
        {
            "Pending" => BadgeStyle.Warning,
            "Approved" => BadgeStyle.Info,
            "Processing" => BadgeStyle.Primary,
            "Shipped" => BadgeStyle.Secondary,
            "Completed" => BadgeStyle.Success,
            "Cancelled" => BadgeStyle.Danger,
            _ => BadgeStyle.Light,
        };
    } 

    [Inject]
    private ApplicationDbContext DbContext { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    private UserManager<ApplicationUser> UserManager { get; set; }

    private IEnumerable<OrderHeader> Orders { get; set; } = new List<OrderHeader>();
    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                if (user.IsInRole("Admin"))
                {
                    Orders = await DbContext.OrderHeaders
                                            .OrderByDescending(o => o.OrderDate)
                                            .ToListAsync();
                }
                else
                {
                    var currentUser = await UserManager.GetUserAsync(user);
                    if (currentUser != null)
                    {
                        Orders = await DbContext.OrderHeaders
                                                .Where(o => o.ApplicationUserId == currentUser.Id)
                                                .OrderByDescending(o => o.OrderDate)
                                                .ToListAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Terjadi kesalahan saat memuat data: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}