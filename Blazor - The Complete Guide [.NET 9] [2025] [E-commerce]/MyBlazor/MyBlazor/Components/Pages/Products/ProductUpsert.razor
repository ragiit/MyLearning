@page "/products/create"
@page "/products/edit/{Id:int}"
@attribute [Authorize(Roles = SD.Role_Admin)]

@inject MyBlazor.Repository.IRepository.IProductRepository ProductRepository
@inject MyBlazor.Repository.IRepository.ICategoryRepository CategoryRepository
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>@Title</PageTitle>

<RadzenCard class="mt-4">
    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1" class="mb-4">
        <i class="bi bi-box-seam me-2"></i> @Title
    </RadzenText>

    <RadzenTemplateForm TItem="Product" Data="product" Submit="HandleUpsert">
        <DataAnnotationsValidator />

        <div class="row mb-4">
            <div class="col-md-3">
                <RadzenLabel Text="Nama Produk" Component="Name" class="fw-bold" />
            </div>
            <div class="col-md-9">
                <RadzenTextBox Name="Name" @bind-Value="product.Name" class="w-100" Placeholder="Masukkan nama produk" />
                <RadzenRequiredValidator Component="Name" Text="Nama produk harus diisi" Popup="true" />
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <RadzenLabel Text="Harga" Component="Price" class="fw-bold" />
            </div>
            <div class="col-md-9">
                <RadzenNumeric TValue="decimal" Name="Price" @bind-Value="product.Price" Format="C" Culture="System.Globalization.CultureInfo.CurrentCulture" class="w-100" Placeholder="0.00" />
                <RadzenNumericRangeValidator Component="Price" Min="0.01" Max="1000000000" Text="Harga harus lebih besar dari 0" Popup="true" />
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <RadzenLabel Text="Kategori" Component="CategoryId" class="fw-bold" />
            </div>
            <div class="col-md-9">
                @if (categories != null)
                {
                    <RadzenDropDown TValue="int" Name="CategoryId" Data="@categories" TextProperty="Name" ValueProperty="Id"
                                    @bind-Value="product.CategoryId" Placeholder="-- Pilih Kategori --" class="w-100"
                                    AllowClear="true" />
                    <RadzenRequiredValidator Component="CategoryId" Text="Kategori harus dipilih" DefaultValue="0" Popup="true" />
                }
                else
                {
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" style="height: 38px;" />
                }
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <RadzenLabel Text="Deskripsi" Component="Description" class="fw-bold" />
            </div>
            <div class="col-md-9">
                @* <RadzenTextArea Name="Description" @bind-Value="product.Description" class="w-100" Placeholder="Deskripsi produk" rows="4" /> *@
                <RadzenHtmlEditor @bind-Value=@product.Description style="height: 450px;" UploadUrl="upload/image" />
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <RadzenLabel Text="Gambar Produk" Component="ImageFile" class="fw-bold" />
            </div>
            <div class="col-md-9">
                <RadzenUpload  Accept="image/*" Multiple="false" Auto="false"
                              Change="@(args => HandleFileSelection(args))" class="w-100">
                    <Template>
                        <RadzenText>Pilih atau jatuhkan file di sini...</RadzenText>
                    </Template>
                </RadzenUpload>
                @if (!string.IsNullOrEmpty(imagePreviewUrl) || !string.IsNullOrEmpty(product.ImageUrl))
                {
                    <div class="mt-3">
                        <RadzenText TextStyle="TextStyle.Subtitle2">Preview:</RadzenText>
                        <RadzenImage Path="@(imagePreviewUrl ?? product.ImageUrl)" class="img-thumbnail" Style="max-width: 200px; height: auto;" />
                    </div>
                }
            </div>
        </div>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" class="mt-5">
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Light" Text="Batal" Icon="cancel" Click="@Cancel" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(Id == 0 ? "Simpan" : "Perbarui")" Icon="save" IsBusy="@isSubmitting" />
        </RadzenStack>

    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter]
    public int Id { get; set; }

    private string Title => (Id == 0) ? "Tambah Produk Baru" : "Edit Produk";
    private Product product = new();
    private IEnumerable<MyBlazor.Data.Category>? categories;
    private bool isSubmitting = false;
    private IBrowserFile? selectedImageFile;
    private byte[]? selectedImageBytes; // Untuk menampung DATA file yang dipilih
    private string? selectedImageContentType; // Untuk info tipe gambar
    private string? imagePreviewUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        if (Id != 0)
        {
            await LoadProduct();
        }
    }

    private async Task LoadCategories()
    {
        categories = await CategoryRepository.GetAllAsync();
    }

    private async Task LoadProduct()
    {
        var existingProduct = await ProductRepository.GetByIdAsync(Id);
        if (existingProduct != null)
        {
            product = existingProduct;
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"Produk dengan ID {Id} tidak ditemukan." });
            NavigationManager.NavigateTo("/products");
        }
    }

    // Perhatikan perubahan argumen ke UploadChangeEventArgs
    // Ganti seluruh metode ini dengan yang baru
    private async Task HandleFileSelection(UploadChangeEventArgs args)
    {
        var file = args.Files.FirstOrDefault();
        if (file == null) return;

        if (file.Size > 5 * 1024 * 1024) // 5 MB
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ukuran Terlalu Besar", Detail = "Ukuran gambar maksimal 5MB." });
            return;
        }

        // Baca file menjadi byte array SEKARANG JUGA
        using (var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024))
        {
            selectedImageBytes = new byte[file.Size];
            await stream.ReadAsync(selectedImageBytes);
        }

        selectedImageContentType = file.ContentType;

        // Buat preview dari byte array yang sudah disimpan
        imagePreviewUrl = $"data:{selectedImageContentType};base64,{Convert.ToBase64String(selectedImageBytes)}";
        StateHasChanged();
    }

    private async Task HandleUpsert()
    {
        isSubmitting = true;

        if (selectedImageBytes != null)
    {
        string oldImageUrl = product.ImageUrl ?? string.Empty;
        if (!string.IsNullOrEmpty(oldImageUrl))
        {
            var oldFilePath = Path.Combine(WebHostEnvironment.WebRootPath, oldImageUrl.TrimStart('/'));
            if (File.Exists(oldFilePath))
            {
                File.Delete(oldFilePath);
            }
        }

        string uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images", "product");
        if (!Directory.Exists(uploadsFolder))
        {
            Directory.CreateDirectory(uploadsFolder);
        }

        // Buat nama file dari GUID dan content type yang sudah disimpan
        string extension = Path.GetExtension(selectedImageContentType switch {
            "image/jpeg" => ".jpg",
            "image/png" => ".png",
            _ => ".jpg" // default
        });
        string fileName = $"{Guid.NewGuid()}{extension}";
        string filePath = Path.Combine(uploadsFolder, fileName);

        // Gunakan MemoryStream dari byte[] yang sudah kita simpan
        using (var stream = new MemoryStream(selectedImageBytes))
        using (var fileStream = File.Create(filePath))
        {
            await stream.CopyToAsync(fileStream);
        }
        product.ImageUrl = $"/images/product/{fileName}";
    }

        try
        {
            if (Id == 0)
            {
                await ProductRepository.CreateAsync(product);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sukses", Detail = "Produk baru berhasil ditambahkan!" });
            }
            else
            {
                await ProductRepository.UpdateAsync(product);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sukses", Detail = "Produk berhasil diperbarui!" });
            }
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"Gagal menyimpan produk: {ex.Message}" });
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}