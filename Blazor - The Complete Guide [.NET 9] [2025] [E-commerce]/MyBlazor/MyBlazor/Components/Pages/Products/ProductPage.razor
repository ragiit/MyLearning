@page "/products"
@using MyBlazor.Components.Shared
@inject MyBlazor.Repository.IRepository.IProductRepository ProductRepository
@inject MyBlazor.Repository.IRepository.ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Daftar Produk</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Daftar Produk</h2>
        <button class="btn btn-primary d-flex align-items-center" @onclick="NavigateToCreate">
            <i class="bi bi-plus-circle me-2"></i> Tambah Produk Baru
        </button>
    </div>

    @if (products == null)
    {
        <div class="alert alert-info text-center" role="alert">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Memuat...</span>
            </div>
            <p class="mt-2 mb-0">Memuat produk...</p>
        </div>
    }
    else if (!products.Any())
    {
        <div class="alert alert-warning text-center" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> Belum ada produk yang ditambahkan.
            <button class="btn btn-sm btn-outline-primary ms-3" @onclick="NavigateToCreate">Tambahkan Sekarang!</button>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th scope="col" class="py-3 ps-4">ID</th>
                                <th scope="col" class="py-3">Gambar</th>
                                <th scope="col" class="py-3">Nama Produk</th>
                                <th scope="col" class="py-3">Harga</th>
                                <th scope="col" class="py-3">Kategori</th>
                                <th scope="col" class="py-3 pe-4 text-end">Aksi</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td class="py-3 ps-4">@product.Id</td>
                                    <td class="py-3"> 
                                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                                        {
                                            <img src="@product.ImageUrl" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;" alt="Product Image" />
                                        }
                                        else
                                        {
                                            <i class="bi bi-image" style="font-size: 2.5em; color: #ccc;"></i>  
                                        }
                                    </td>
                                    <td class="py-3">@product.Name</td>
                                    <td class="py-3">@product.Price.ToString("C")</td> @* Format sebagai mata uang *@
                                    <td class="py-3">@(product.Category?.Name ?? "Tidak Ada")</td> @* Tampilkan nama kategori, atau "Tidak Ada" jika null *@
                                    <td class="py-3 pe-4 text-end">
                                        <button class="btn btn-sm btn-outline-info me-2" @onclick="(() => NavigateToEdit(product.Id))">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="(() => OpenDeleteModal(product.Id, product.Name))">
                                            <i class="bi bi-trash"></i> Hapus
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<MyBlazor.Data.Product>? products;
    private int productToDeleteId;
    private string productToDeleteName = string.Empty;
    private bool showDeleteModal;
    private bool _hasLoadedInitialData = false;

    protected override async Task OnInitializedAsync()
    {
        if (!_hasLoadedInitialData)
        {
            await LoadProducts();
            _hasLoadedInitialData = true;
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            // Pastikan GetAllAsync() di ProductRepository mengambil relasi Category
            products = await ProductRepository.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Gagal memuat produk: {ex.Message}");
            products = Enumerable.Empty<MyBlazor.Data.Product>();
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/products/create");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

    private void OpenDeleteModal(int id, string name)
    {
        productToDeleteId = id;
        productToDeleteName = name;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        productToDeleteId = 0;
        productToDeleteName = string.Empty;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var result = await ProductRepository.DeleteAsync(productToDeleteId);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("showToastr", "success", $"Produk '{productToDeleteName}' berhasil dihapus!");
                await LoadProducts();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Gagal menghapus produk '{productToDeleteName}'. Mungkin sudah tidak ada.");
                Console.WriteLine($"Gagal menghapus produk dengan ID: {productToDeleteId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Terjadi kesalahan saat menghapus produk: {ex.Message}");
        }
        finally
        {
            CloseDeleteModal();
        }
    }
}

<BsModal Show="@showDeleteModal"
         Title="Konfirmasi Penghapusan Produk"
         HeaderCssClass="bg-danger text-white"
         CloseButtonCssClass="btn-close-white"
         ConfirmButtonText="Hapus"
         ConfirmButtonCssClass="btn-danger"
         OnClose="CloseDeleteModal"
         OnConfirm="ConfirmDelete">
    <ChildContent>
        Apakah Anda yakin ingin menghapus produk "<strong class="text-danger">@productToDeleteName</strong>" (ID: @productToDeleteId)? Aksi ini tidak dapat dibatalkan.
    </ChildContent>
</BsModal>